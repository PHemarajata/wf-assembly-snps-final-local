#!/bin/bash
### ---
### name: 'ASSEMBLY_SNPS_SCALABLE:CLUSTERED_SNP_TREE:SKA_BUILD (cluster_cluster_3)'
### container: 'quay.io/biocontainers/ska2:0.3.7--h4349ce8_2'
### outputs:
### - 'cluster_3.skf'
### - 'versions.yml'
### ...
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x
NXF_ENTRY=${1:-nxf_main}

nxf_tree() {
    local pid=$1

    declare -a ALL_CHILDREN
    while read P PP;do
        ALL_CHILDREN[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    pstat() {
        local x_pid=$1
        local STATUS=$(2> /dev/null < /proc/$1/status grep -E 'Vm|ctxt')

        if [ $? = 0 ]; then
        local  x_vsz=$(echo "$STATUS" | grep VmSize | awk '{print $2}' || echo -n '0')
        local  x_rss=$(echo "$STATUS" | grep VmRSS | awk '{print $2}' || echo -n '0')
        local x_peak=$(echo "$STATUS" | grep -E 'VmPeak|VmHWM' | sed 's/^.*:\s*//' | sed 's/[\sa-zA-Z]*$//' | tr '\n' ' ' || echo -n '0 0')
        local x_pmem=$(awk -v rss=$x_rss -v mem_tot=$mem_tot 'BEGIN {printf "%.0f", rss/mem_tot*100*10}' || echo -n '0')
        local vol_ctxt=$(echo "$STATUS" | grep '\bvoluntary_ctxt_switches' | awk '{print $2}' || echo -n '0')
        local inv_ctxt=$(echo "$STATUS" | grep '\bnonvoluntary_ctxt_switches' | awk '{print $2}' || echo -n '0')
        cpu_stat[x_pid]="$x_pid $x_pmem $x_vsz $x_rss $x_peak $vol_ctxt $inv_ctxt"
        fi
    }

    pwalk() {
        pstat $1
        for i in ${ALL_CHILDREN[$1]:=}; do pwalk $i; done
    }

    pwalk $1
}

nxf_stat() {
    cpu_stat=()
    nxf_tree $1

    declare -a sum=(0 0 0 0 0 0 0 0)
    local pid
    local i
    for pid in "${!cpu_stat[@]}"; do
        local row=(${cpu_stat[pid]})
        [ $NXF_DEBUG = 1 ] && echo "++ stat mem=${row[*]}"
        for i in "${!row[@]}"; do
        if [ $i != 0 ]; then
            sum[i]=$((sum[i]+row[i]))
        fi
        done
    done

    [ $NXF_DEBUG = 1 ] && echo -e "++ stat SUM=${sum[*]}"

    for i in {1..7}; do
        if [ ${sum[i]} -lt ${cpu_peak[i]} ]; then
            sum[i]=${cpu_peak[i]}
        else
            cpu_peak[i]=${sum[i]}
        fi
    done

    [ $NXF_DEBUG = 1 ] && echo -e "++ stat PEAK=${sum[*]}\n"
    nxf_stat_ret=(${sum[*]})
}

nxf_mem_watch() {
    set -o pipefail
    local pid=$1
    local trace_file=.command.trace
    local count=0;
    declare -a cpu_stat=(0 0 0 0 0 0 0 0)
    declare -a cpu_peak=(0 0 0 0 0 0 0 0)
    local mem_tot=$(< /proc/meminfo grep MemTotal | awk '{print $2}')
    local timeout
    local DONE
    local STOP=''

    [ $NXF_DEBUG = 1 ] && nxf_sleep 0.2 && ps fx

    while true; do
        nxf_stat $pid
        if [ $count -lt 10 ]; then timeout=1;
        elif [ $count -lt 120 ]; then timeout=5;
        else timeout=30;
        fi
        read -t $timeout -r DONE || true
        [[ $DONE ]] && break
        if [ ! -e /proc/$pid ]; then
            [ ! $STOP ] && STOP=$(nxf_date)
            [ $(($(nxf_date)-STOP)) -gt 10000 ] && break
        fi
        count=$((count+1))
    done

    printf "%s\n" \
        "%mem=${nxf_stat_ret[1]}" \
        "vmem=${nxf_stat_ret[2]}" \
        "rss=${nxf_stat_ret[3]}" \
        "peak_vmem=${nxf_stat_ret[4]}" \
        "peak_rss=${nxf_stat_ret[5]}" \
        "vol_ctxt=${nxf_stat_ret[6]}" \
        "inv_ctxt=${nxf_stat_ret[7]}" >> "$trace_file" || >&2 echo "Error: Failed to append to file: $trace_file"
}

nxf_write_trace() {
    printf "%s\n" \
        "nextflow.trace/v2" \
        "realtime=$wall_time" \
        "%cpu=$ucpu" \
        "cpu_model=$cpu_model" \
        "rchar=${io_stat1[0]}" \
        "wchar=${io_stat1[1]}" \
        "syscr=${io_stat1[2]}" \
        "syscw=${io_stat1[3]}" \
        "read_bytes=${io_stat1[4]}" \
        "write_bytes=${io_stat1[5]}" >| "$trace_file" || >&2 echo "Error: Failed to write to file: $trace_file"
}

nxf_trace_mac() {
    local start_millis=$(nxf_date)

    /bin/bash -euo pipefail /home/phemarajata/wf-assembly-snps-final/work/43/de52c3ba712f71150a9aea6dc095df/.command.sh

    local end_millis=$(nxf_date)
    local wall_time=$((end_millis-start_millis))
    local ucpu=''
    local cpu_model=''
    local io_stat1=('' '' '' '' '' '')
    nxf_write_trace
}

nxf_fd() {
    local FD=11
    while [ -e /proc/$$/fd/$FD ]; do FD=$((FD+1)); done
    echo $FD
}

nxf_trace_linux() {
    local pid=$$
    command -v ps &>/dev/null || { >&2 echo "Command 'ps' required by nextflow to collect task metrics cannot be found"; exit 1; }
    local num_cpus=$(< /proc/cpuinfo grep '^processor' -c)
    local cpu_model=$(< /proc/cpuinfo grep '^model name' | head -n 1 | awk 'BEGIN{FS="\t: "} { print $2 }')
    local tot_time0=$(grep '^cpu ' /proc/stat | awk '{sum=$2+$3+$4+$5+$6+$7+$8+$9; printf "%.0f",sum}')
    local cpu_time0=$(2> /dev/null < /proc/$pid/stat awk '{printf "%.0f", ($16+$17)*10 }' || echo -n 'X')
    local io_stat0=($(2> /dev/null < /proc/$pid/io sed 's/^.*:\s*//' | head -n 6 | tr '\n' ' ' || echo -n '0 0 0 0 0 0'))
    local start_millis=$(nxf_date)
    trap 'kill $mem_proc' ERR
    
    /bin/bash -euo pipefail /home/phemarajata/wf-assembly-snps-final/work/43/de52c3ba712f71150a9aea6dc095df/.command.sh &
    local task=$!

    mem_fd=$(nxf_fd)
    eval "exec $mem_fd> >(nxf_mem_watch $task)"
    local mem_proc=$!

    wait $task

    local end_millis=$(nxf_date)
    local tot_time1=$(grep '^cpu ' /proc/stat | awk '{sum=$2+$3+$4+$5+$6+$7+$8+$9; printf "%.0f",sum}')
    local cpu_time1=$(2> /dev/null < /proc/$pid/stat awk '{printf "%.0f", ($16+$17)*10 }' || echo -n 'X')
    local ucpu=$(awk -v p1=$cpu_time1 -v p0=$cpu_time0 -v t1=$tot_time1 -v t0=$tot_time0 -v n=$num_cpus 'BEGIN { pct=(p1-p0)/(t1-t0)*100*n; printf("%.0f", pct>0 ? pct : 0) }' )

    local io_stat1=($(2> /dev/null < /proc/$pid/io sed 's/^.*:\s*//' | head -n 6 | tr '\n' ' ' || echo -n '0 0 0 0 0 0'))
    local i
    for i in {0..5}; do
        io_stat1[i]=$((io_stat1[i]-io_stat0[i]))
    done

    local wall_time=$((end_millis-start_millis))
    [ $NXF_DEBUG = 1 ] && echo "+++ STATS %CPU=$ucpu TIME=$wall_time I/O=${io_stat1[*]}"

    printf "%s\n" \
        "nextflow.trace/v2" \
        "realtime=$wall_time" \
        "%cpu=$ucpu" \
        "cpu_model=$cpu_model" \
        "rchar=${io_stat1[0]}" \
        "wchar=${io_stat1[1]}" \
        "syscr=${io_stat1[2]}" \
        "syscw=${io_stat1[3]}" \
        "read_bytes=${io_stat1[4]}" \
        "write_bytes=${io_stat1[5]}" >| "$trace_file" || >&2 echo "Error: Failed to write to file: $trace_file"

    [ -e /proc/$mem_proc ] && eval "echo 'DONE' >&$mem_fd" || true
    wait $mem_proc 2>/dev/null || true
    while [ -e /proc/$mem_proc ]; do nxf_sleep 0.1; done
}

nxf_trace() {
    local trace_file=.command.trace
    touch $trace_file
    if [[ $(uname) = Darwin ]]; then
        nxf_trace_mac
    else
        nxf_trace_linux
    fi
}
nxf_container_env() {
cat << EOF
export PYTHONNOUSERSITE="1"
export R_PROFILE_USER="/.Rprofile"
export R_ENVIRON_USER="/.Renviron"
export JULIA_DEPOT_PATH="/usr/local/share/julia"
export PATH="\$PATH:/home/phemarajata/wf-assembly-snps-final/bin"
EOF
}

nxf_sleep() {
  sleep $1 2>/dev/null || sleep 1;
}

nxf_date() {
    local ts=$(date +%s%3N);
    if [[ ${#ts} == 10 ]]; then echo ${ts}000
    elif [[ $ts == *%3N ]]; then echo ${ts/\%3N/000}
    elif [[ $ts == *3N ]]; then echo ${ts/3N/000}
    elif [[ ${#ts} == 13 ]]; then echo $ts
    else echo "Unexpected timestamp value: $ts"; exit 1
    fi
}

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a children
    while read P PP;do
        children[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    kill_all() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${children[$1]:=}; do kill_all $i; done
    }

    kill_all $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    mkdir -p "$base"
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

nxf_fs_copy() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  cp -fRL $source $target/$basedir
}

nxf_fs_move() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  mv -f $source $target/$basedir
}

nxf_fs_rsync() {
  rsync -rRl $1 $2
}

nxf_fs_rclone() {
  rclone copyto $1 $2/$1
}

nxf_fs_fcp() {
  fcp $1 $2/$1
}

on_exit() {
    local last_err=$?
    local exit_status=${nxf_main_ret:=0}
    [[ ${exit_status} -eq 0 && ${nxf_unstage_ret:=0} -ne 0 ]] && exit_status=${nxf_unstage_ret:=0}
    [[ ${exit_status} -eq 0 && ${last_err} -ne 0 ]] && exit_status=${last_err}
    printf -- $exit_status > /home/phemarajata/wf-assembly-snps-final/work/43/de52c3ba712f71150a9aea6dc095df/.exitcode
    set +u
    docker rm $NXF_BOXID &>/dev/null || true
    exit $exit_status
}

on_term() {
    set +e
    docker stop $NXF_BOXID
}

nxf_launch() {
    docker run -i --cpu-shares 2048 --memory 4096m -e "NXF_TASK_WORKDIR" -e "NXF_DEBUG=${NXF_DEBUG:=0}" -v /home/phemarajata/wf-assembly-snps-final:/home/phemarajata/wf-assembly-snps-final -w "$NXF_TASK_WORKDIR" --name $NXF_BOXID quay.io/biocontainers/ska2:0.3.7--h4349ce8_2 /bin/bash -c "eval $(nxf_container_env); /bin/bash -euo pipefail /home/phemarajata/wf-assembly-snps-final/work/43/de52c3ba712f71150a9aea6dc095df/.command.run nxf_trace"
}

nxf_stage() {
    true
    # stage input files
    rm -f IP-0064.fasta
    rm -f IP-0044.fasta
    rm -f IP-0034.fasta
    rm -f IP-0054.fasta
    rm -f IP-0074.fasta
    rm -f IP-0067.fasta
    rm -f IP-0080.fasta
    rm -f IP-0057.fasta
    rm -f IP-0077.fasta
    rm -f IP-0038.fasta
    rm -f IP-0048.fasta
    rm -f IP-0058.fasta
    rm -f IP-0060.fasta
    rm -f IP-0070.fasta
    rm -f IP-0040.fasta
    rm -f IP-0050.fasta
    rm -f IP-0035.fasta
    rm -f IP-0037.fasta
    rm -f IP-0078.fasta
    rm -f IP-0043.fasta
    rm -f IP-0063.fasta
    rm -f IP-0066.fasta
    rm -f IP-0046.fasta
    rm -f IP-0049.fasta
    rm -f IP-0069.fasta
    rm -f IP-0071.fasta
    rm -f IP-0031.fasta
    rm -f IP-0051.fasta
    rm -f IP-0036.fasta
    rm -f IP-0079.fasta
    rm -f IP-0072.fasta
    rm -f IP-0062.fasta
    rm -f IP-0032.fasta
    rm -f IP-0042.fasta
    rm -f IP-0052.fasta
    rm -f IP-0075.fasta
    rm -f IP-0055.fasta
    rm -f IP-0065.fasta
    rm -f IP-0045.fasta
    rm -f IP-0047.fasta
    rm -f IP-0068.fasta
    rm -f IP-0033.fasta
    rm -f IP-0053.fasta
    rm -f IP-0073.fasta
    rm -f IP-0061.fasta
    rm -f IP-0039.fasta
    rm -f IP-0076.fasta
    rm -f IP-0056.fasta
    rm -f IP-0059.fasta
    rm -f IP-0041.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/d0/fed4182cf09801545a820ba5aa985e/inputfiles/IP-0064.fasta IP-0064.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/fb/c00ff4eeef44dcccdcd801eadbb537/inputfiles/IP-0044.fasta IP-0044.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/e3/7f40e13d34101a06dbd3483ccac8e2/inputfiles/IP-0034.fasta IP-0034.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/9b/f4c5f49e4c59ed4364c67e01d41e12/inputfiles/IP-0054.fasta IP-0054.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/e6/f75cd5e6f4927c514d16c5195aa5e3/inputfiles/IP-0074.fasta IP-0074.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/32/fae1da54e6fa776cd22af312c2ba7d/inputfiles/IP-0067.fasta IP-0067.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/b8/d025374f8ae510492a85d6f3ff3bf9/inputfiles/IP-0080.fasta IP-0080.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/58/7dd405ee3bcac86397748063cd780b/inputfiles/IP-0057.fasta IP-0057.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/cf/090d06e2f7c9c3ee30ad48845628ab/inputfiles/IP-0077.fasta IP-0077.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/1c/ca3e5b2f82d7819716884f8827801f/inputfiles/IP-0038.fasta IP-0038.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/27/6c44adc87028cf6abf1e3e5c163892/inputfiles/IP-0048.fasta IP-0048.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/69/6ec58be7bff0fe022369d656b7fa9d/inputfiles/IP-0058.fasta IP-0058.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/78/286a94da03045ec0ec5d4869ca73a7/inputfiles/IP-0060.fasta IP-0060.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/29/e16e299e619169e75334c7a4d8b029/inputfiles/IP-0070.fasta IP-0070.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/8c/8e542bcbe2e1629df304d3af64f859/inputfiles/IP-0040.fasta IP-0040.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/4a/7501867025d0d6be13f05d0964736c/inputfiles/IP-0050.fasta IP-0050.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/2d/d618e14fa5cf339fdff73ce0de7c3b/inputfiles/IP-0035.fasta IP-0035.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/be/2bba3d02221e306f8d3f6d0fc6744f/inputfiles/IP-0037.fasta IP-0037.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/c1/ed547a1355b1c3f70af0803e2e5ada/inputfiles/IP-0078.fasta IP-0078.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/c5/3e7cd041bf68a450925bb80f912327/inputfiles/IP-0043.fasta IP-0043.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/e0/dfe656d8ca161e5542ca63fdc5782c/inputfiles/IP-0063.fasta IP-0063.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/74/6d62caf1a1f3203e5f933ec9745528/inputfiles/IP-0066.fasta IP-0066.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/9d/bcef724d97c0edf83d74228ce72fb9/inputfiles/IP-0046.fasta IP-0046.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/dc/73911d3a1d05dab63ce26273abd4d1/inputfiles/IP-0049.fasta IP-0049.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/c4/b5916b8027af43393f705646a76933/inputfiles/IP-0069.fasta IP-0069.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/f4/d3163edf3f04f1d868d9bed78c9dc8/inputfiles/IP-0071.fasta IP-0071.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/b4/e1820168c1acac06bda3442c586f3d/inputfiles/IP-0031.fasta IP-0031.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/80/fc0540d6ea618375e13e39ae09aa8d/inputfiles/IP-0051.fasta IP-0051.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/ea/12534b5083d82000952b51c5d4f4b3/inputfiles/IP-0036.fasta IP-0036.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/e8/0ef79226a0b487a3bf79ad98630497/inputfiles/IP-0079.fasta IP-0079.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/55/2856f100a3a9838f584a86759463b2/inputfiles/IP-0072.fasta IP-0072.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/8f/5008b362cabbc25a7c4ad397324172/inputfiles/IP-0062.fasta IP-0062.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/ad/5e7cecd26bda8c9643478c1e51fc94/inputfiles/IP-0032.fasta IP-0032.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/61/8997be1edbb2009370146569d0fa5f/inputfiles/IP-0042.fasta IP-0042.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/51/ce023fb2f9dbb566926ae9a200cb03/inputfiles/IP-0052.fasta IP-0052.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/b3/76cb25fc161c195f79a86676b2ffa8/inputfiles/IP-0075.fasta IP-0075.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/1b/d0f296a39dbab74036d9e8bb8a7052/inputfiles/IP-0055.fasta IP-0055.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/78/61492bed0a142263edc9d0b4319999/inputfiles/IP-0065.fasta IP-0065.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/d2/ef0ce58ad3679eea96206e466bcd14/inputfiles/IP-0045.fasta IP-0045.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/b8/bf0a0b3eadb251474d787ac582474a/inputfiles/IP-0047.fasta IP-0047.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/f9/1c42a855850f6e480e8b0eec126bce/inputfiles/IP-0068.fasta IP-0068.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/7a/bb6a43c1cf57cd0037d5ab06bd6011/inputfiles/IP-0033.fasta IP-0033.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/c2/bc2710338f6ed9b82a08403d06d510/inputfiles/IP-0053.fasta IP-0053.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/9b/5f302c9426f28a6c18bae98fdecaaf/inputfiles/IP-0073.fasta IP-0073.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/6c/47a4843f55bbb76873c2812a24805b/inputfiles/IP-0061.fasta IP-0061.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/f3/98698d4658940d37dfd8f21676752d/inputfiles/IP-0039.fasta IP-0039.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/55/d5ea58dc6a4a01f42d19cdf6bb46e5/inputfiles/IP-0076.fasta IP-0076.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/64/269dad1afaca39be76e2e40ef8730f/inputfiles/IP-0056.fasta IP-0056.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/be/1d5ed2e01034ae23670bfc9a50b9d5/inputfiles/IP-0059.fasta IP-0059.fasta
    ln -s /home/phemarajata/wf-assembly-snps-final/work/87/a9a05fd9a0a1705a9e174ea35ffd9d/inputfiles/IP-0041.fasta IP-0041.fasta
}

nxf_unstage_outputs() {
    true
}

nxf_unstage_controls() {
    true
}

nxf_unstage() {
    if [[ ${nxf_main_ret:=0} == 0 ]]; then
        (set -e -o pipefail; (nxf_unstage_outputs | tee -a .command.out) 3>&1 1>&2 2>&3 | tee -a .command.err)
        nxf_unstage_ret=$?
    fi
    nxf_unstage_controls
}

nxf_main() {
    trap on_exit EXIT
    trap on_term TERM INT USR2
    trap '' USR1

    [[ "${NXF_CHDIR:-}" ]] && cd "$NXF_CHDIR"
    export NXF_BOXID="nxf-$(dd bs=18 count=1 if=/dev/urandom 2>/dev/null | base64 | tr +/ 0A | tr -d '\r\n')"
    NXF_SCRATCH=''
    [[ $NXF_DEBUG > 0 ]] && nxf_env
    touch /home/phemarajata/wf-assembly-snps-final/work/43/de52c3ba712f71150a9aea6dc095df/.command.begin
    set +u
    set -u
    [[ $NXF_SCRATCH ]] && cd $NXF_SCRATCH
    export NXF_TASK_WORKDIR="$PWD"
    nxf_stage

    set +e
    (set -o pipefail; (nxf_launch | tee .command.out) 3>&1 1>&2 2>&3 | tee .command.err) &
    pid=$!
    wait $pid || nxf_main_ret=$?
    nxf_unstage
}

$NXF_ENTRY
